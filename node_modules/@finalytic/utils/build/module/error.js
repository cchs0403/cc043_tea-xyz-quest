export { serializeError } from 'serialize-error';
import { serializeError } from 'serialize-error';
export class SDKError extends Error {
    statusCode;
    static isSDKError(err) {
        return err instanceof SDKError ? true : false;
    }
    static fromMessage(message, statusCode = 500) {
        return new SDKError(message, statusCode);
    }
    static fromError(error) {
        return error && error instanceof SDKError
            ? error
            : new SDKError(error.message, error.statusCode || 500, error.originalError);
    }
    static from(error) {
        return error && error instanceof SDKError
            ? error
            : new SDKError(error.message, error.statusCode || 500, error.originalError);
    }
    help;
    detail;
    originalError;
    constructor(message, statusCode, originalError) {
        super(message?.replace('[GraphQL]', '').trim() || 'Unknown Error');
        this.statusCode = statusCode;
        this.name = 'GenericError';
        this.originalError = originalError
            ? serializeError(originalError)
            : undefined;
    }
    toJSON(includeStack = true) {
        if (includeStack)
            return serializeError(this);
        const { stack, ...rest } = serializeError(this);
        return rest;
    }
    toString() {
        return this.message;
    }
    toResponse() {
        return {
            error: this.toJSON(false),
            statusCode: this.statusCode,
            status: 'error',
        };
    }
}
