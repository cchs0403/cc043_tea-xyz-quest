import ArraySchema from './array';
import BaseSchema from './base';
import NumericSchema from './numeric';
import ObjectSchema from './object';
import StringSchema from './string';
export { ValidationError } from './base';
export { BaseSchema, StringSchema, NumericSchema, ArraySchema, ObjectSchema };
export class SchemaFactory extends BaseSchema {
    /**
     * Create an empty schema
     *
     * @exmaple { }
     *
     * @returns {BaseSchema<any>}
     */
    any() {
        return new BaseSchema().copyWith(this);
    }
    /**
     * Create StringSchema
     *
     * @example { "type": "string" }
     *
     * @returns {StringSchema}
     */
    string() {
        return new StringSchema().copyWith(this);
    }
    /**
     * Create NumericSchema(number)
     *
     * @example { "type": "number" }
     *
     * @returns {NumericSchema}
     */
    number() {
        return new NumericSchema('number').copyWith(this);
    }
    /**
     * Create NumericSchema(integer)
     *
     * @example { "type": "integer" }
     *
     * @returns {NumericSchema}
     */
    integer() {
        return new NumericSchema('integer').copyWith(this);
    }
    /**
     * Create BooleanSchema
     *
     * @example { "type": "boolean" }
     *
     * @returns {BaseSchema<boolean>}
     */
    boolean() {
        return new BaseSchema('boolean').copyWith(this);
    }
    /**
     * Create NullSchema
     *
     * @example { "type": "null" }
     *
     * @returns {BaseSchema<null>}
     */
    null() {
        return new BaseSchema('null').copyWith(this);
    }
    /**
     * Create ArraySchema
     *
     * @example { "type": "array" }
     *
     * @returns {ArraySchema}
     */
    array() {
        return new ArraySchema().copyWith(this);
    }
    /**
     * Create ArraySchema
     *
     * @example { "type": "array", "items": { ... } }
     *
     * @returns {ArraySchema}
     */
    list(items) {
        return new ArraySchema().items(items).copyWith(this);
    }
    /**
     * Create ObjectSchema
     *
     * @example { "type": "object" }
     *
     * @returns {ObjectSchema}
     */
    object() {
        return new ObjectSchema().copyWith(this);
    }
    parse(plain) {
        const res = new ObjectSchema().copyWith({ plain: plain });
        return res;
    }
    /**
     * Create ObjectSchema
     *
     * @example { "type": "object", "properties": { ... }, "additionalProperties": false }
     *
     * @returns {ObjectSchema}
     */
    shape(props, additional = false) {
        let res = new ObjectSchema()
            .additionalProperties(additional)
            .copyWith(this);
        for (const prop in props)
            res = res.prop(prop, props[prop]);
        return res;
    }
    /**
     * Check the type of the provided value. Used custom ajv keyword.
     *
     * @param {Class} Type
     */
    instanceOf(Type) {
        return new BaseSchema().custom((data) => data instanceof Type);
    }
}
export const S = new SchemaFactory();
