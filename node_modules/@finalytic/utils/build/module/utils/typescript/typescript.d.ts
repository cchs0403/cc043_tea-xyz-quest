export declare function enforce<T>(obj?: any): T;
export declare function ensure<T>(obj: T): T;
export type ValueOf<T> = T[keyof T];
export type Then<T> = T extends PromiseLike<infer U> ? U : T;
export type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType[number];
export declare function isDefined<T>(argument: T | undefined | null): argument is T;
export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export type Unarray<T> = T extends Array<infer U> ? U : T;
