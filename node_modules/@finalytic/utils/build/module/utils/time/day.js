import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import isBetween from 'dayjs/plugin/isBetween';
import relativeTime from 'dayjs/plugin/relativeTime';
import utcPlugin from 'dayjs/plugin/utc';
import weekOfYear from 'dayjs/plugin/weekOfYear';
import './nights';
dayjs.extend(utcPlugin);
dayjs.extend(weekOfYear);
dayjs.extend(customParseFormat);
dayjs.extend(relativeTime);
dayjs.extend(isBetween);
const update = (_, dayjsClass) => {
    dayjsClass.prototype.yyyymmdd = function _yyyymmdd() {
        return this.format('YYYY-MM-DD');
    };
    dayjsClass.prototype.datesBetween = function _datesBetween(end) {
        return datesBetween(this, end);
    };
    dayjsClass.prototype.adiff = function (unit, date, float) {
        return adiff(unit, this, date, float);
    };
};
dayjs.extend(update);
export function day(date = new Date(), format) {
    return dayjs(date, format);
}
export function utc(date = new Date(), format) {
    return dayjs.utc(date, format);
}
export function yyyymmdd(date = new Date()) {
    return day(date).yyyymmdd();
}
export function isDateBetween(date = new Date(), date1 = new Date(), date2 = new Date()) {
    return day(date).isBetween(date1, date2);
}
export function adiff(unit, date = new Date(), date1 = new Date(), float = 'floor') {
    const diff = Math.abs(day(date).diff(date1, unit, true));
    if (float === true)
        return diff;
    return Math[`${float}`](diff);
}
export function datesBetween(start, end) {
    if (typeof start === 'string' && start.includes('...')) {
        const [startDate, endDate] = start.split('...');
        start = startDate;
        end = endDate;
    }
    if (!end)
        end = start;
    const dateArray = [];
    let currentDate = day(start);
    while (!currentDate.isAfter(end)) {
        dateArray.push(day(currentDate).yyyymmdd());
        currentDate = currentDate.add(1, 'day');
    }
    return dateArray;
}
export function isDate(date) {
    if (!date)
        return false;
    const d = typeof date === 'string' || typeof date === 'number'
        ? new Date(date)
        : date;
    return d.toString() !== 'Invalid Date' && !Number.isNaN(+d);
}
