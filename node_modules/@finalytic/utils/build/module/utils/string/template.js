function walk(objSource, action, path = []) {
    function isTemplate(objSource) {
        return typeof objSource === 'string' && objSource.indexOf('$') === 0;
    }
    function iterate(objSource, property) {
        const newPath = [...path, property];
        if (isTemplate(objSource[property])) {
            action({
                source: objSource,
                property,
                path: newPath,
                variableName: objSource[property].substring(1),
            });
        }
        else if (typeof objSource[property] === 'object') {
            objSource[property] = walk(objSource[property], action, newPath);
        }
    }
    if (typeof objSource === 'object' && objSource) {
        if (Array.isArray(objSource)) {
            for (let i = 0; i < objSource.length; i++) {
                iterate(objSource, i);
            }
        }
        else {
            for (const property in objSource) {
                iterate(objSource, property);
            }
        }
        return objSource;
    }
    return objSource;
}
export const template = {
    replace(objSource, objReplacer) {
        return walk(objSource, ({ source, property, variableName }) => {
            if (!objReplacer[variableName]) {
                throw new Error(`Could not find ${variableName}`);
            }
            source[property] = objReplacer[variableName];
        });
    },
    gather(objSource) {
        const info = {};
        walk(objSource, ({ path, variableName }) => {
            info[path.join('.')] = variableName;
        });
        return info;
    },
    walk,
};
