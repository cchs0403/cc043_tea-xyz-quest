const isObject = (item) => typeof item === 'object' && !Array.isArray(item);
export const merge = (target, source) => {
    if (!target)
        target = {};
    if (!source)
        source = {};
    const isDeep = (prop) => isObject(source[prop]) && target[prop] && isObject(target[prop]);
    const replaced = Object.getOwnPropertyNames(source)
        .map((prop) => ({
        [prop]: isDeep(prop) ? merge(target[prop], source[prop]) : source[prop],
    }))
        .reduce((a, b) => {
        for (const key in b)
            a[key] = b[key];
        return a;
    }, {});
    return {
        ...target,
        ...replaced,
    };
};
