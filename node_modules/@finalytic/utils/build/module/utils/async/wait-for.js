import { ms, random } from '../time';
export async function waitFor(time, time2) {
    if (time2) {
        await new Promise((y) => setTimeout(y, random(time, time2)));
    }
    else {
        const timeout = ms(time);
        await new Promise((y) => setTimeout(y, timeout));
    }
}
export function waitUntil(a, b, c) {
    let promise;
    let condition;
    let options = undefined;
    if (b && typeof b === 'function') {
        promise = a;
        condition = b;
        options = c;
    }
    else {
        promise = a;
        condition = (a) => a;
        options = b;
    }
    const start = Date.now();
    const retryEvery = ms(options?.retryEvery || 100);
    const timeoutAfter = ms(options?.timeoutAfter || '1s');
    return new Promise((y, n) => {
        async function attempt() {
            try {
                const result = await promise();
                if (condition(result))
                    y(result);
                else {
                    if (Date.now() - start > timeoutAfter)
                        n(options.error || new Error('Timeout'));
                    else
                        setTimeout(attempt, retryEvery);
                }
            }
            catch (er) {
                n(er);
            }
        }
        attempt();
    });
}
