import { ms } from '../time';
export function debounce(funcOrDelay, delayOrImmediate
//immediateOrNull?: any
) {
    if (typeof funcOrDelay === 'function') {
        const func = funcOrDelay;
        const delay = delayOrImmediate;
        // const immediate = immediateOrNull;
        // debounce(delay, immediate)(func, '');
        return debounce(delay)(func, '');
    }
    const delay = funcOrDelay;
    const immediate = delayOrImmediate;
    const cache = {};
    const fn = (func, key) => {
        const fn = (...args) => {
            cache[key] = cache[key] || {};
            cache[key].time = +new Date();
            if (!cache[key].id && immediate) {
                func(...args);
            }
            clearTimeout(cache[key].id);
            cache[key].id = setTimeout(() => {
                delete cache[key];
                func(...args);
            }, delay);
        };
        fn.cache = cache;
        return fn;
    };
    fn.cache = cache;
    return fn;
}
export function throttle(func, duration = '1s') {
    let lastTime = 0;
    const timeFrame = ms(duration);
    return (...args) => {
        const now = +new Date();
        if (now - lastTime >= timeFrame) {
            func(...args);
            lastTime = now;
        }
    };
}
