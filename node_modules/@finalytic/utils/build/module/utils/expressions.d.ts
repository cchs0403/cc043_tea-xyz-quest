export type ExpressionTree = ExpressionNode[];
export type ExpressionNode = {
    kind: 'number';
    value: number;
} | {
    kind: 'operator';
    type: '+' | '-' | '*' | '/' | '%';
} | {
    kind: 'field';
    value: string;
} | {
    kind: 'group';
    type: 'parenthesis';
    value: ExpressionTree;
} | {
    kind: 'func';
    type: string;
    value: ExpressionTree;
};
export type ExpressionFn = (a: number, b: number) => number;
export declare const expression: {
    toString(value: ExpressionTree, separator?: string): string;
    toTree(value: string): ExpressionTree;
    execute(value: ExpressionTree, context?: {
        functions?: Record<string, ExpressionFn>;
        getData?: (field: string) => number | undefined;
        explain?: boolean;
    }): number;
    executeAsync(value: ExpressionTree, context?: {
        functions?: Record<string, ExpressionFn>;
        getData?: (field: string) => Promise<number | undefined> | number | undefined;
    }): Promise<number>;
};
