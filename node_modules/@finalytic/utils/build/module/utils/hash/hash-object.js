import { sortBy, uniqueBy } from '../array';
import { hashId } from './hash';
export const hashObject = (obj, keys, hash = true) => {
    const result = [];
    if (!keys)
        keys = sortBy(Object.keys(obj));
    for (const key of keys) {
        const value = convert(obj[key]);
        if (value)
            result.push(`${String(key)}_${String(value)}`);
    }
    return hash ? hashId(result.join('_')) : result.join('_');
};
function convert(value) {
    if (value === null || value === undefined)
        return undefined;
    if (['number', 'string', 'boolean', 'bigint'].includes(typeof value))
        return String(value);
    if (typeof value === 'object' && 'toISOString' in value)
        return value.toISOString().split('T')[0];
    if (Array.isArray(value) && value.length && convert(value[0]) !== undefined)
        return sortBy(uniqueBy(value.map((x) => String(x)))).join(',');
    return undefined;
}
