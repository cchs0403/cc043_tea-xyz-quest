"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SESSION_KEY = exports.SESSION_SCORE_KEY = exports.DEFAULT_TAG = exports.MAX_BACK_OFF = exports.STARTING_BACK_OFF = exports.MAX_FETCH_ERROR_RETRY = exports.SAMPLE_RATE = exports.HOSTNAME_CHECK = exports.FLUSH_BYTE_LIMIT = exports.LOG_LINE_FLUSH_TIMEOUT = exports.DEFAULT_INGESTION_URL = exports.DEFAULT_CONFIG = void 0;
const DEFAULT_INGESTION_URL = 'https://logs.logdna.com/logs/ingest';
exports.DEFAULT_INGESTION_URL = DEFAULT_INGESTION_URL;
const LOG_LINE_FLUSH_TIMEOUT = 250; // ms
exports.LOG_LINE_FLUSH_TIMEOUT = LOG_LINE_FLUSH_TIMEOUT;
const FLUSH_BYTE_LIMIT = 60 * 1024; // Max chrome allows with fetch and keep alive is 64kb, we are making it smaller to account for headers and unknowns
exports.FLUSH_BYTE_LIMIT = FLUSH_BYTE_LIMIT;
const SAMPLE_RATE = 100;
exports.SAMPLE_RATE = SAMPLE_RATE;
const STARTING_BACK_OFF = 1000; // 1 sec
exports.STARTING_BACK_OFF = STARTING_BACK_OFF;
const MAX_BACK_OFF = 60000; // 60 sec
exports.MAX_BACK_OFF = MAX_BACK_OFF;
const MAX_FETCH_ERROR_RETRY = 30;
exports.MAX_FETCH_ERROR_RETRY = MAX_FETCH_ERROR_RETRY;
const DEFAULT_TAG = 'LogDNA-Browser';
exports.DEFAULT_TAG = DEFAULT_TAG;
const SESSION_SCORE_KEY = 'logdna::browser::sessionscore';
exports.SESSION_SCORE_KEY = SESSION_SCORE_KEY;
const SESSION_KEY = 'logdna::browser::sessionid';
exports.SESSION_KEY = SESSION_KEY;
const HOSTNAME_CHECK = new RegExp('^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\\.)*' +
    '([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$');
exports.HOSTNAME_CHECK = HOSTNAME_CHECK;
const DEFAULT_CONFIG = {
    url: DEFAULT_INGESTION_URL,
    hostname: 'logdna-browser-logger',
    flushInterval: LOG_LINE_FLUSH_TIMEOUT,
    enableStacktrace: true,
    sampleRate: SAMPLE_RATE,
    tags: [],
    app: '',
    plugins: [],
    type: 'pretty',
    hooks: {
        beforeSend: [],
    },
};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
