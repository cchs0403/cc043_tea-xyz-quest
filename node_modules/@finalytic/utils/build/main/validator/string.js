"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("./base"));
class StringSchema extends base_1.default {
    constructor() {
        super('string');
    }
    /**
     *  The value of this property must be a media type, as defined by RFC 2046 [RFC2046].
     *  This property defines the media type of instances which this schema defines.
     *
     * @param {string} contentMediaType
     * @reference https://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3
     * @returns {StringSchema}
     */
    contentMediaType(contentMediaType) {
        return this.copyWith({ plain: { contentMediaType } });
    }
    /**
     *  If the instance value is a string, this property defines that the string SHOULD
     *  be interpreted as binary data and decoded using the encoding named by this property.
     *  RFC 2045, Sec 6.1 [RFC2045] lists the possible values for this property.
     *
     * @param {string} contentEncoding
     * @reference https://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3
     * @returns {StringSchema}
     */
    contentEncoding(contentEncoding) {
        return this.copyWith({ plain: { contentEncoding } });
    }
    /**
     * A string value can be RELATIVE_JSON_POINTER, JSON_POINTER, UUID, REGEX, IPV6, IPV4, HOSTNAME, EMAIL, URL, URI_TEMPLATE, URI_REFERENCE, URI, TIME, DATE,
     *
     * @param {string} format
     * @reference https://json-schema.org/latest/json-schema-validation.html#rfc.section.7.3
     * @returns {StringSchema}
     */
    format(format) {
        return this.copyWith({ plain: { format } });
    }
    /**
     * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.
     * The length of a string instance is defined as the number of its characters as defined by RFC 7159 [RFC7159].
     *
     * @param {number} minLength
     * @reference https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.3.2
     * @returns {StringSchema}
     */
    minLength(minLength) {
        return this.copyWith({ plain: { minLength } });
    }
    /**
     * A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.
     * The length of a string instance is defined as the number of its characters as defined by RFC 7159 [RFC7159].
     *
     * @param {number} maxLength
     * @reference https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.3.2
     * @returns {StringSchema}
     */
    maxLength(maxLength) {
        return this.copyWith({ plain: { maxLength } });
    }
    /**
     *  This string SHOULD be a valid regular expression, according to the ECMA 262 regular expression dialect.
     *  A string instance is considered valid if the regular expression matches the instance successfully.
     *
     * @param {string} pattern
     * @reference https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.3.3
     * @returns {StringSchema}
     */
    pattern(pattern) {
        return this.copyWith({
            plain: {
                pattern: pattern
                    .toString()
                    .substring(1)
                    .replace(`/${pattern.flags}`, ''),
            },
        });
    }
    /**
     * Make schema optional in {ObjectSchema}
     * @returns {StringSchema}
     */
    optional() {
        return this.copyWith({ isRequired: false });
    }
}
exports.default = StringSchema;
