"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDKError = exports.serializeError = void 0;
var serialize_error_1 = require("serialize-error");
Object.defineProperty(exports, "serializeError", { enumerable: true, get: function () { return serialize_error_1.serializeError; } });
const serialize_error_2 = require("serialize-error");
class SDKError extends Error {
    static isSDKError(err) {
        return err instanceof SDKError ? true : false;
    }
    static fromMessage(message, statusCode = 500) {
        return new SDKError(message, statusCode);
    }
    static fromError(error) {
        return error && error instanceof SDKError
            ? error
            : new SDKError(error.message, error.statusCode || 500, error.originalError);
    }
    static from(error) {
        return error && error instanceof SDKError
            ? error
            : new SDKError(error.message, error.statusCode || 500, error.originalError);
    }
    constructor(message, statusCode, originalError) {
        super(message?.replace('[GraphQL]', '').trim() || 'Unknown Error');
        this.statusCode = statusCode;
        this.name = 'GenericError';
        this.originalError = originalError
            ? (0, serialize_error_2.serializeError)(originalError)
            : undefined;
    }
    toJSON(includeStack = true) {
        if (includeStack)
            return (0, serialize_error_2.serializeError)(this);
        const { stack, ...rest } = (0, serialize_error_2.serializeError)(this);
        return rest;
    }
    toString() {
        return this.message;
    }
    toResponse() {
        return {
            error: this.toJSON(false),
            statusCode: this.statusCode,
            status: 'error',
        };
    }
}
exports.SDKError = SDKError;
