"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchToCurl = exports.generateCompress = exports.generateBody = exports.escapeBody = exports.generateHeader = exports.isInstanceOfHeaders = exports.generateMethod = void 0;
const generateMethod = (options) => {
    const method = options.method;
    if (!method)
        return '';
    const type = {
        GET: ' -X GET',
        POST: ' -X POST',
        PUT: ' -X PUT',
        PATCH: ' -X PATCH',
        DELETE: ' -X DELETE',
        HEAD: ' -X HEAD',
        OPTIONS: ' -X OPTIONS',
    };
    return type[method.toUpperCase()] || '';
};
exports.generateMethod = generateMethod;
const isInstanceOfHeaders = (val) => {
    if (typeof Headers !== 'function') {
        return false;
    }
    return val instanceof Headers;
};
exports.isInstanceOfHeaders = isInstanceOfHeaders;
const getHeaderString = (name, val) => ` -H "${name}: ${`${val}`.replace(/(\\|")/g, '\\$1')}"`;
const generateHeader = (options = {}) => {
    const { headers } = options;
    let isEncode = false;
    let headerParam = '';
    if ((0, exports.isInstanceOfHeaders)(headers)) {
        for (const [name, val] of headers) {
            if (name.toLocaleLowerCase() !== 'content-length') {
                headerParam += getHeaderString(name, val);
            }
            if (name.toLocaleLowerCase() === 'accept-encoding') {
                isEncode = true;
            }
        }
    }
    else if (headers) {
        for (const [name, val] of Object.entries(headers)) {
            if (name.toLocaleLowerCase() !== 'content-length') {
                headerParam += getHeaderString(name, String(val));
            }
            if (name.toLocaleLowerCase() === 'accept-encoding') {
                isEncode = true;
            }
        }
    }
    return {
        params: headerParam,
        isEncode,
    };
};
exports.generateHeader = generateHeader;
function escapeBody(body) {
    if (typeof body !== 'string')
        return body;
    return body.replace(/'/g, `'\\''`);
}
exports.escapeBody = escapeBody;
function generateBody(body) {
    if (!body)
        return '';
    if (typeof body === 'object') {
        return ` --data-binary '${escapeBody(JSON.stringify(body))}'`;
    }
    return ` --data-binary '${escapeBody(body)}'`;
}
exports.generateBody = generateBody;
function generateCompress(isEncode) {
    return isEncode ? ' --compressed' : '';
}
exports.generateCompress = generateCompress;
const fetchToCurl = (requestInfo, requestInit) => {
    let url;
    let options;
    /**
     * initialization with an empty object is done here to
     * keep everything backwards compatible to 0.4.0 and below
     */
    if (typeof requestInfo === 'string' || requestInfo instanceof URL) {
        url = requestInfo;
        options = requestInit || {};
    }
    else {
        url = requestInfo?.url;
        options = requestInfo || {};
    }
    const { body } = options;
    const headers = (0, exports.generateHeader)(options);
    return `curl '${url}'${(0, exports.generateMethod)(options)}${headers.params || ''}${generateBody(body)}${generateCompress(headers.isEncode)}`;
};
exports.fetchToCurl = fetchToCurl;
