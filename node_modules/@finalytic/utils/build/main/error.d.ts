export { type ErrorObject, serializeError } from 'serialize-error';
import { type ErrorObject } from 'serialize-error';
export type ErrorType = {
    error: string;
    code: string;
    message: string;
    detail: string;
    help: string;
};
export declare class SDKError extends Error {
    readonly statusCode?: number;
    static isSDKError(err: SDKError | unknown): err is SDKError;
    static fromMessage(message: string, statusCode?: number): SDKError;
    static fromError(error: any | SDKError): SDKError;
    static from(error: any | SDKError): SDKError;
    readonly help?: string;
    readonly detail?: string;
    readonly originalError?: any;
    constructor(message: string, statusCode?: number, originalError?: any);
    toJSON(includeStack?: boolean): ErrorObject;
    toString(): string;
    toResponse(): {
        error: ErrorObject;
        statusCode: number;
        status: string;
    };
}
