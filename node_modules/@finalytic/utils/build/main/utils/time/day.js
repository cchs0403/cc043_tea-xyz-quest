"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDate = exports.datesBetween = exports.adiff = exports.isDateBetween = exports.yyyymmdd = exports.utc = exports.day = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const customParseFormat_1 = __importDefault(require("dayjs/plugin/customParseFormat"));
const isBetween_1 = __importDefault(require("dayjs/plugin/isBetween"));
const relativeTime_1 = __importDefault(require("dayjs/plugin/relativeTime"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
const weekOfYear_1 = __importDefault(require("dayjs/plugin/weekOfYear"));
require("./nights");
dayjs_1.default.extend(utc_1.default);
dayjs_1.default.extend(weekOfYear_1.default);
dayjs_1.default.extend(customParseFormat_1.default);
dayjs_1.default.extend(relativeTime_1.default);
dayjs_1.default.extend(isBetween_1.default);
const update = (_, dayjsClass) => {
    dayjsClass.prototype.yyyymmdd = function _yyyymmdd() {
        return this.format('YYYY-MM-DD');
    };
    dayjsClass.prototype.datesBetween = function _datesBetween(end) {
        return datesBetween(this, end);
    };
    dayjsClass.prototype.adiff = function (unit, date, float) {
        return adiff(unit, this, date, float);
    };
};
dayjs_1.default.extend(update);
function day(date = new Date(), format) {
    return (0, dayjs_1.default)(date, format);
}
exports.day = day;
function utc(date = new Date(), format) {
    return dayjs_1.default.utc(date, format);
}
exports.utc = utc;
function yyyymmdd(date = new Date()) {
    return day(date).yyyymmdd();
}
exports.yyyymmdd = yyyymmdd;
function isDateBetween(date = new Date(), date1 = new Date(), date2 = new Date()) {
    return day(date).isBetween(date1, date2);
}
exports.isDateBetween = isDateBetween;
function adiff(unit, date = new Date(), date1 = new Date(), float = 'floor') {
    const diff = Math.abs(day(date).diff(date1, unit, true));
    if (float === true)
        return diff;
    return Math[`${float}`](diff);
}
exports.adiff = adiff;
function datesBetween(start, end) {
    if (typeof start === 'string' && start.includes('...')) {
        const [startDate, endDate] = start.split('...');
        start = startDate;
        end = endDate;
    }
    if (!end)
        end = start;
    const dateArray = [];
    let currentDate = day(start);
    while (!currentDate.isAfter(end)) {
        dateArray.push(day(currentDate).yyyymmdd());
        currentDate = currentDate.add(1, 'day');
    }
    return dateArray;
}
exports.datesBetween = datesBetween;
function isDate(date) {
    if (!date)
        return false;
    const d = typeof date === 'string' || typeof date === 'number'
        ? new Date(date)
        : date;
    return d.toString() !== 'Invalid Date' && !Number.isNaN(+d);
}
exports.isDate = isDate;
