"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.whereArray = exports.whereDate = exports.parseDateFromString = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
function parseDateFromString(date) {
    if (date === 'today' || !date)
        return ['day', (0, dayjs_1.default)(new Date())];
    if (date.endsWith('day') || date.endsWith('days')) {
        const [d] = date.split('day');
        const days = Number.parseInt(d);
        return [
            'day',
            (0, dayjs_1.default)(new Date()).add(typeof days === 'number' && !Number.isNaN(days) ? days : 1, 'day'),
        ];
    }
    const split = date
        .split('-')
        .map((x) => Number.parseInt(x, 10))
        .map((x) => (Number.isNaN(x) ? undefined : x));
    let type = undefined;
    let year = new Date().getFullYear();
    let month = 1;
    let day = 1;
    if (split.length === 1) {
        type = 'year';
        year = split[0] || year;
    }
    else if (split.length === 2) {
        type = 'month';
        year = split[0] || year;
        month = split[1] || month;
    }
    else if (split.length === 3) {
        type = 'day';
        year = split[0] || year;
        month = split[1] || month;
        day = split[2] || day;
    }
    return [type, (0, dayjs_1.default)(new Date(year, month - 1, day))];
}
exports.parseDateFromString = parseDateFromString;
function whereDate(date) {
    let where = {
        _gte: undefined,
        _lt: undefined,
    };
    if (date) {
        const [from, to] = date?.split('...') || [];
        if (from && to) {
            const [, fromDate] = parseDateFromString(from);
            const [type, toDate] = parseDateFromString(to);
            where = {
                _gte: fromDate.format('YYYY-MM-DD'),
                _lt: type === 'day'
                    ? toDate.add(1, 'day').format('YYYY-MM-DD')
                    : toDate.format('YYYY-MM-DD'),
            };
        }
        else if (from) {
            const [type, fromDate] = parseDateFromString(from);
            if (type === 'day') {
                where = {
                    _gte: fromDate.format('YYYY-MM-DD'),
                    _lt: fromDate.add(1, 'day').format('YYYY-MM-DD'),
                };
            }
            else if (type === 'month') {
                where = {
                    _gte: fromDate.format('YYYY-MM-DD'),
                    _lt: fromDate.add(1, 'month').format('YYYY-MM-DD'),
                };
            }
            else if (type === 'year') {
                where = {
                    _gte: fromDate.format('YYYY-MM-DD'),
                    _lt: fromDate.add(1, 'year').format('YYYY-MM-DD'),
                };
            }
        }
    }
    return where;
}
exports.whereDate = whereDate;
function whereArray(arr) {
    if (!arr)
        return undefined;
    if (Array.isArray(arr))
        arr = arr.join(',');
    if (typeof arr !== 'string')
        return undefined;
    if (arr[0] === '!') {
        return {
            _nin: arr
                .substring(1)
                .split(',')
                .map((x) => x.trim()),
        };
    }
    return {
        _in: arr.split(',').map((x) => x.trim()),
    };
}
exports.whereArray = whereArray;
