import dayjs from 'dayjs';

export function parseDateFromString(
  date?: string
): ['year' | 'month' | 'day', dayjs.Dayjs] {
  if (date === 'today' || !date) return ['day', dayjs(new Date())];
  if (date.endsWith('day') || date.endsWith('days')) {
    const [d] = date.split('day');
    const days = Number.parseInt(d);
    return [
      'day',
      dayjs(new Date()).add(
        typeof days === 'number' && !Number.isNaN(days) ? days : 1,
        'day'
      ),
    ];
  }
  const split = date
    .split('-')
    .map((x) => Number.parseInt(x, 10))
    .map((x) => (Number.isNaN(x) ? undefined : x));
  let type: 'year' | 'month' | 'day' | undefined = undefined;
  let year = new Date().getFullYear();
  let month = 1;
  let day = 1;
  if (split.length === 1) {
    type = 'year';
    year = split[0] || year;
  } else if (split.length === 2) {
    type = 'month';
    year = split[0] || year;
    month = split[1] || month;
  } else if (split.length === 3) {
    type = 'day';
    year = split[0] || year;
    month = split[1] || month;
    day = split[2] || day;
  }
  return [type!, dayjs(new Date(year, month - 1, day))];
}

export function whereDate(date?: string) {
  let where: { _gte?: string; _lt?: string } = {
    _gte: undefined,
    _lt: undefined,
  };
  if (date) {
    const [from, to] = date?.split('...') || [];
    if (from && to) {
      const [, fromDate] = parseDateFromString(from);
      const [type, toDate] = parseDateFromString(to);
      where = {
        _gte: fromDate.format('YYYY-MM-DD'),
        _lt:
          type === 'day'
            ? toDate.add(1, 'day').format('YYYY-MM-DD')
            : toDate.format('YYYY-MM-DD'),
      };
    } else if (from) {
      const [type, fromDate] = parseDateFromString(from);
      if (type === 'day') {
        where = {
          _gte: fromDate.format('YYYY-MM-DD'),
          _lt: fromDate.add(1, 'day').format('YYYY-MM-DD'),
        };
      } else if (type === 'month') {
        where = {
          _gte: fromDate.format('YYYY-MM-DD'),
          _lt: fromDate.add(1, 'month').format('YYYY-MM-DD'),
        };
      } else if (type === 'year') {
        where = {
          _gte: fromDate.format('YYYY-MM-DD'),
          _lt: fromDate.add(1, 'year').format('YYYY-MM-DD'),
        };
      }
    }
  }
  return where;
}

export function whereArray(arr: string | undefined | null) {
  if (!arr) return undefined;
  if (Array.isArray(arr)) arr = arr.join(',');
  if (typeof arr !== 'string') return undefined;

  if (arr[0] === '!') {
    return {
      _nin: arr
        .substring(1)
        .split(',')
        .map((x) => x.trim()),
    };
  }
  return {
    _in: arr.split(',').map((x) => x.trim()),
  };
}
