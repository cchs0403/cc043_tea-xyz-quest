export function race<T = unknown>(
  promises: Promise<T>[],
  {
    ignoreErrors = false,
    condition,
  }: {
    ignoreErrors?: boolean;
    condition?: (res: T) => boolean;
  }
): Promise<Awaited<T>> {
  let resolved = 0;
  let isResolved = false;
  return new Promise((resolve, reject) => {
    for (const promise of promises) {
      promise
        .then((res) => {
          resolved += 1;
          if (condition) {
            const isTruthy = condition ? condition(res) : res;
            if (!isResolved && isTruthy) {
              resolve(res as any);
              isResolved = true;
            }
            if (resolved === promises.length && !isResolved)
              reject(new Error('Could not resolve any condition'));
          } else if (!isResolved) {
            resolve(res as any);
            isResolved = true;
          }
        })
        .catch((err) => {
          if (!ignoreErrors && !isResolved) {
            isResolved = true;
            reject(err);
          }
          resolved += 1;
          if (resolved === promises.length && !isResolved) reject(err);
        });
    }
  });
}
