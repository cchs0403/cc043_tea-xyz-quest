import { type Duration, ms, random } from '../time';

export async function waitFor(time: Duration, time2?: Duration) {
  if (time2) {
    await new Promise((y) => setTimeout(y, random(time, time2)));
  } else {
    const timeout = ms(time);
    await new Promise((y) => setTimeout(y, timeout));
  }
}

type Options = {
  retryEvery?: Duration;
  timeoutAfter?: Duration;
  error?: any;
};
export function waitUntil<T>(
  promise: () => PromiseLike<T> | T,
  condition: (t: T) => any,
  options?: Options
): Promise<T>;
export function waitUntil<T>(
  promise: () => PromiseLike<T> | T,
  options?: Options
): Promise<T>;
export function waitUntil<T>(a: any, b: any, c?: any): Promise<T> {
  let promise: () => PromiseLike<T>;
  let condition: (t: T) => any;
  let options: Options = undefined;

  if (b && typeof b === 'function') {
    promise = a as any;
    condition = b as any;
    options = c as any;
  } else {
    promise = a as any;
    condition = (a) => a;
    options = b as any;
  }

  const start = Date.now();
  const retryEvery = ms(options?.retryEvery || 100);
  const timeoutAfter = ms(options?.timeoutAfter || '1s');
  return new Promise((y, n) => {
    async function attempt() {
      try {
        const result = await promise();
        if (condition(result)) y(result);
        else {
          if (Date.now() - start > timeoutAfter)
            n(options.error || new Error('Timeout'));
          else setTimeout(attempt, retryEvery);
        }
      } catch (er) {
        n(er);
      }
    }
    attempt();
  });
}
