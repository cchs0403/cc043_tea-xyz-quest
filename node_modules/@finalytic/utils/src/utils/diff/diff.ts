export interface DifferenceCreate {
  t: 'c';
  p: (string | number)[];
  v: any;
}

export interface DifferenceRemove {
  t: 'r';
  p: (string | number)[];
  o: any;
}

export interface DifferenceChange {
  t: 'u';
  p: (string | number)[];
  v: any;
  o: any;
}

export type Difference = DifferenceCreate | DifferenceRemove | DifferenceChange;

interface Options {
  cyclesFix: boolean;
}

const richTypes = { Date: true, RegExp: true, String: true, Number: true };

export function diff(
  obj: Record<string, any> | any[],
  newObj: Record<string, any> | any[],
  options: Partial<Options> = { cyclesFix: true },
  _stack: Record<string, any>[] = []
): Difference[] {
  const diffs: Difference[] = [];
  const isObjArray = Array.isArray(obj);

  for (const key in obj) {
    const objKey = obj[key];
    const path = isObjArray ? +key : key;
    if (!(key in newObj)) {
      diffs.push({
        t: 'r',
        p: [path],
        o: obj[key],
      });
      continue;
    }
    const newObjKey = newObj[key];
    const areObjects =
      typeof objKey === 'object' && typeof newObjKey === 'object';
    if (
      objKey &&
      newObjKey &&
      areObjects &&
      !richTypes[Object.getPrototypeOf(objKey)?.constructor?.name] &&
      (!options.cyclesFix || !_stack.includes(objKey))
    ) {
      const nestedDiffs = diff(
        objKey,
        newObjKey,
        options,
        options.cyclesFix ? _stack.concat([objKey]) : []
      );
      diffs.push.apply(
        diffs,
        nestedDiffs.map((difference) => {
          difference.p.unshift(path);
          return difference;
        })
      );
    } else if (
      objKey !== newObjKey &&
      !(
        areObjects &&
        (Number.isNaN(objKey)
          ? `${objKey}` === `${newObjKey}`
          : +objKey === +newObjKey)
      )
    ) {
      diffs.push({
        p: [path],
        t: 'u',
        v: newObjKey,
        o: objKey,
      });
    }
  }

  const isNewObjArray = Array.isArray(newObj);
  for (const key in newObj) {
    if (!(key in obj)) {
      diffs.push({
        t: 'c',
        p: [isNewObjArray ? +key : key],
        v: newObj[key],
      });
    }
  }
  return diffs;
}
