import type { Difference } from './diff';

export function patch(
  obj: Record<string, any> | any[],
  diffs: Difference[]
): Record<string, any> | any[] {
  const arrayDelQueue: (() => void)[] = [];
  const removeSymbol = Symbol('micropatch-delete');

  for (const diff of diffs) {
    if (!diff.p || diff.p.length === 0) continue;

    let currObj = obj;
    const diffPathLength = diff.p.length;
    const lastPathElement = diff.p[diffPathLength - 1];
    const secondLastPathElement = diff.p[diffPathLength - 2];
    for (let i = 0; i < diffPathLength - 1; i++) {
      currObj = currObj[diff.p[i]];
    }

    switch (diff.t) {
      case 'c':
      case 'u':
        currObj[lastPathElement] = diff.v;
        break;
      case 'r':
        if (Array.isArray(currObj)) {
          (currObj as any)[lastPathElement] = removeSymbol;
          arrayDelQueue.push(() => {
            if (secondLastPathElement !== undefined) {
              (currObj as any)[secondLastPathElement] = (currObj as any)[
                secondLastPathElement
              ].filter((e: any) => e !== removeSymbol);
            } else {
              obj = obj.filter((e: any) => e !== removeSymbol);
            }
          });
        } else {
          delete currObj[lastPathElement];
        }
        break;
    }
  }

  for (const arrayDeletion of arrayDelQueue) {
    arrayDeletion();
  }

  return obj;
}
