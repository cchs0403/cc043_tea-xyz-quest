export function enforce<T>(obj?: any): T {
  return obj!;
}
export function ensure<T>(obj: T): T {
  return obj;
}
export type ValueOf<T> = T[keyof T];
export type Then<T> = T extends PromiseLike<infer U> ? U : T;
export type ArrayElement<ArrayType extends readonly unknown[]> =
  ArrayType[number];

export function isDefined<T>(argument: T | undefined | null): argument is T {
  return argument !== undefined && argument !== null;
}
export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

export type Unarray<T> = T extends Array<infer U> ? U : T;
