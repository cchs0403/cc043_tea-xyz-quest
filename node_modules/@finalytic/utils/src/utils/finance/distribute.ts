import { sum } from '../array';

export function distribute<T, T2 extends keyof T>(
  arr: T[],
  key: T2 | ((s: T) => number),
  total = 100
): [T, number][] {
  if (!arr) return [];
  if (!arr.length) return [];

  const numbers = arr.map<number | undefined>((item) => {
    let value: number | undefined = undefined;
    if (typeof item === 'number') {
      value = item;
    } else {
      if (!key)
        throw new Error('Specify a key if distribution is on an object');
      value = typeof key === 'function' ? key(item) : item[String(key)];
    }
    return typeof value === 'number' ? value : undefined;
  });

  const remaining = total - sum(arr, (_, i) => numbers[i] || 0);
  if (remaining < 0) throw new Error('Split is over 100');

  const noSplit = arr.filter((_, i) => numbers[i] === undefined);
  const split = remaining / noSplit.length;
  return arr.map(
    (item, i) =>
      [item, numbers[i] === undefined ? split : numbers[i]] as [T, number]
  );
}

export function distributeCent<T, T2 extends keyof T>(
  arr: T[],
  key: T2 | ((s: T) => number),
  cent: number,
  oddStrategy: 'last' | 'first' | 'random' = 'last'
): [T, number][] {
  const isNegative = cent < 0;
  cent = Math.abs(cent);

  const dist = distribute(arr, key, 100);
  let remaining = cent;

  let firstFeasable: [T, number] = undefined as any;
  let lastFeasable: [T, number] = undefined as any;
  const result = dist.map(([item, split], _i) => {
    const amount = Math.floor((cent / 100) * split);
    remaining -= amount;
    const res: [T, number] = [item, amount];
    if (amount > 0 && !firstFeasable) firstFeasable = res;
    if (amount > 0) lastFeasable = res;
    return res as [T, number];
  });
  if (!remaining) return result.map((x) => [x[0], isNegative ? -x[1] : x[1]]);

  const restDivided = Math.floor(remaining / result.length);
  for (const x of result) {
    if (x[1]) x[1] += restDivided;
  }

  remaining = remaining - restDivided * result.length;
  if (lastFeasable && oddStrategy === 'last') lastFeasable[1] += remaining;
  else if (firstFeasable && oddStrategy === 'first')
    firstFeasable[1] += remaining;
  else if (oddStrategy === 'random') {
    const random = Math.floor(Math.random() * result.length);
    result[random][1] += remaining;
  } else {
    throw new Error(
      `Could not distribute ${cent} cents to ${arr.length} targets`
    );
  }

  return result.map((x) => [x[0], isNegative ? -x[1] : x[1]]);
}
