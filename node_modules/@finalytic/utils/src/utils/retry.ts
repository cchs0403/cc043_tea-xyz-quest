import { waitFor } from './async';

type BaseConstructor = new (..._args: any[]) => Error;
export async function retry<T>(
  fn: (attempt: number) => Promise<T>,
  {
    attempts = 3,
    throwError,
    onRetry,
    waitFor: wait,
  }: {
    attempts?: number;
    throwError?: BaseConstructor[] | ((err: any) => boolean);
    onRetry?: (err: any, attempt: number, totalAttempts: number) => void;
    waitFor?: number | string;
  } = {}
) {
  let err: any;
  for (let i = 1; i <= attempts; i++) {
    try {
      if (i > 1 && wait) await waitFor(wait);
      return await fn(i);
    } catch (error) {
      if (throwError) {
        if (Array.isArray(throwError)) {
          if (throwError.find((type) => error instanceof type)) throw error;
        } else if (throwError(error)) {
          throw error;
        }
      }
      if (onRetry) {
        onRetry(error, i + 1, attempts);
      }
      err = error;
    }
  }
  throw err;
}
