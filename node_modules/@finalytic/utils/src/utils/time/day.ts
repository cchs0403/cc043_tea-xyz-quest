declare module 'dayjs' {
  interface Dayjs {
    yyyymmdd(): string;
    nights(end: dayjs.ConfigType): number;
    datesBetween(end: dayjs.ConfigType): string[];
    adiff(
      unit?: dayjs.OpUnitType,
      date?: dayjs.ConfigType,
      float?: false | true | 'ceil' | 'floor' | 'round'
    ): number;
    isBetween(
      start: dayjs.ConfigType,
      end: dayjs.ConfigType,
      c?: dayjs.OpUnitType | null,
      d?: '()' | '[]' | '[)' | '(]'
    ): boolean;
  }
}

import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import isBetween from 'dayjs/plugin/isBetween';
import relativeTime from 'dayjs/plugin/relativeTime';
import utcPlugin from 'dayjs/plugin/utc';
import weekOfYear from 'dayjs/plugin/weekOfYear';

import './nights';
dayjs.extend(utcPlugin);
dayjs.extend(weekOfYear);
dayjs.extend(customParseFormat);
dayjs.extend(relativeTime);
dayjs.extend(isBetween);

const update: dayjs.PluginFunc = (_, dayjsClass) => {
  dayjsClass.prototype.yyyymmdd = function _yyyymmdd() {
    return this.format('YYYY-MM-DD');
  };
  dayjsClass.prototype.datesBetween = function _datesBetween(
    end: dayjs.ConfigType
  ) {
    return datesBetween(this, end);
  };
  dayjsClass.prototype.adiff = function (unit, date, float) {
    return adiff(unit, this, date, float);
  };
};
dayjs.extend(update);

export function day(date: dayjs.ConfigType = new Date(), format?: string) {
  return dayjs(date, format);
}

export function utc(date: dayjs.ConfigType = new Date(), format?: string) {
  return dayjs.utc(date, format);
}

export function yyyymmdd(date: dayjs.ConfigType = new Date()) {
  return day(date).yyyymmdd();
}

export function isDateBetween(
  date: dayjs.ConfigType = new Date(),
  date1: dayjs.ConfigType = new Date(),
  date2: dayjs.ConfigType = new Date()
) {
  return day(date).isBetween(date1, date2);
}

export function adiff(
  unit: dayjs.OpUnitType,
  date: dayjs.ConfigType = new Date(),
  date1: dayjs.ConfigType = new Date(),
  float: false | true | 'ceil' | 'floor' | 'round' = 'floor'
) {
  const diff = Math.abs(day(date).diff(date1, unit, true));
  if (float === true) return diff;
  return Math[`${float}`](diff);
}

export function datesBetween(
  start: dayjs.ConfigType,
  end?: dayjs.ConfigType
): string[] {
  if (typeof start === 'string' && start.includes('...')) {
    const [startDate, endDate] = start.split('...');
    start = startDate;
    end = endDate;
  }
  if (!end) end = start;
  const dateArray: string[] = [];
  let currentDate = day(start);
  while (!currentDate.isAfter(end)) {
    dateArray.push(day(currentDate).yyyymmdd());
    currentDate = currentDate.add(1, 'day');
  }
  return dateArray;
}

export function isDate(date: string | Date | number) {
  if (!date) return false;
  const d =
    typeof date === 'string' || typeof date === 'number'
      ? new Date(date)
      : date;
  return d.toString() !== 'Invalid Date' && !Number.isNaN(+d);
}
