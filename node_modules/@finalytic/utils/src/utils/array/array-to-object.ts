export function arrayToObject<
  T extends Record<string, any>,
  TKey extends keyof T,
>(array: T[], key: TKey): Record<T[TKey], T>;
export function arrayToObject<
  T extends Record<string, any>,
  TKey extends keyof T,
  TMap extends (item: T) => any,
>(array: T[], key: TKey, fn: TMap): Record<T[TKey], ReturnType<TMap>>;
export function arrayToObject(
  array: any[],
  key: string,
  fn?: (item: any) => any
): any {
  return array.reduce((acc, item) => {
    acc[`${item[key]}`] = typeof fn === 'function' ? fn(item) : item;
    return acc;
  }, {});
}
