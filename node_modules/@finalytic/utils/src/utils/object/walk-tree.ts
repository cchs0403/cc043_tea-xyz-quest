import type { Path } from '../typescript';

export function walkTree<
  T extends Record<any, any>,
  TResult extends Record<Path<T, string>, any>,
>(obj: T, key: string, options?: { returnType: 'outer' | 'inner' }) {
  const mode = options?.returnType || 'inside';
  const result: TResult = {} as any;
  function iter(obj: T, path: string[]) {
    if (!obj || typeof obj !== 'object') {
      return;
    }
    if (key in obj) {
      if (mode === 'inside') (result as any)[`${path.join('.')}`] = obj[key];
      else (result as any)[`${path.join('.')}`] = obj;
      return path;
    }
    for (const k in obj) {
      iter(obj[k], [...path, k]);
    }
    return;
  }
  iter(obj, []);
  return result;
}
