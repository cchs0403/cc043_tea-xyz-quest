const isObject = (item: unknown) =>
  typeof item === 'object' && !Array.isArray(item);

export const merge = <
  A = { readonly [s: string]: unknown },
  B = { readonly [s: string]: unknown },
>(
  target: A,
  source: B
): A & B => {
  if (!target) target = {} as A;
  if (!source) source = {} as B;

  const isDeep = (prop: string) =>
    isObject(source[prop]) && target[prop] && isObject(target[prop]);
  const replaced = Object.getOwnPropertyNames(source)
    .map((prop) => ({
      [prop]: isDeep(prop) ? merge(target[prop], source[prop]) : source[prop],
    }))
    .reduce((a, b) => {
      for (const key in b) a[key] = b[key];
      return a;
    }, {});

  return {
    ...target,
    ...replaced,
  } as A & B;
};
