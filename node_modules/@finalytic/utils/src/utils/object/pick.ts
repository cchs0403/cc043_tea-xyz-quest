export function pick<T, K extends keyof T>(obj: T, keys: K[]): Pick<T, K> {
  const ret: any = {};
  if (obj && typeof obj === 'object')
    for (const key of keys) {
      ret[key] = obj[key];
    }
  return ret;
}

export function omit<T, K extends keyof T>(obj: T, keys: K[]): Omit<T, K> {
  const ret: any = {};
  if (obj && typeof obj === 'object') {
    for (const key in obj) {
      if (!keys.includes(key as any)) ret[key] = obj[key];
    }
  }
  return ret;
}
