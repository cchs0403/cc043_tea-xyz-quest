export function getDeep<T>(
  obj: { [s: string]: unknown } | string | unknown[],
  path: string | readonly string[],
  defaultValue?: T
): T {
  const p = typeof path === 'string' ? path.split(/[,[\].]+?/) : path;
  const s = typeof path === 'string' ? path : path.join('.');
  const result = p
    .filter(Boolean)
    .reduce((result, key) => (result == null ? result : result[key]), obj);

  return result === undefined || result === obj
    ? obj[s] === undefined
      ? defaultValue
      : obj[s]
    : result;
}

export function getFlat<T extends object>(
  obj: T,
  path?: string | undefined | keyof T | number | null,
  defaultValue?: T[keyof T]
): T[keyof T] | undefined {
  if ((obj as any)?.[path] !== undefined)
    return (obj as any)[path] as T[keyof T];
  return defaultValue || undefined;
}
