export { type ErrorObject, serializeError } from 'serialize-error';
import { type ErrorObject, serializeError } from 'serialize-error';

export type ErrorType = {
  error: string;
  code: string;
  message: string;
  detail: string;
  help: string;
};

export class SDKError extends Error {
  static isSDKError(err: SDKError | unknown): err is SDKError {
    return err instanceof SDKError ? true : false;
  }

  static fromMessage(message: string, statusCode = 500) {
    return new SDKError(message, statusCode);
  }

  static fromError(error: any | SDKError) {
    return error && error instanceof SDKError
      ? error
      : new SDKError(
          error.message,
          error.statusCode || 500,
          error.originalError
        );
  }

  static from(error: any | SDKError) {
    return error && error instanceof SDKError
      ? error
      : new SDKError(
          error.message,
          error.statusCode || 500,
          error.originalError
        );
  }

  public readonly help?: string;
  public readonly detail?: string;
  public readonly originalError?: any;
  constructor(
    message: string,
    public readonly statusCode?: number,
    originalError?: any
  ) {
    super(message?.replace('[GraphQL]', '').trim() || 'Unknown Error');
    this.name = 'GenericError';
    this.originalError = originalError
      ? serializeError(originalError)
      : undefined;
  }

  toJSON(includeStack = true): ErrorObject {
    if (includeStack) return serializeError(this);
    const { stack, ...rest } = serializeError(this);
    return rest;
  }

  toString() {
    return this.message;
  }

  toResponse() {
    return {
      error: this.toJSON(false),
      statusCode: this.statusCode,
      status: 'error',
    };
  }
}
