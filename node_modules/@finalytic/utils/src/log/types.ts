export interface LogMethods {
  log(message: any, context?: LogLineContext, level?: LogLevel): void;
  error(message: any, context?: LogLineContext, level?: LogLevel): void;
  warn(message: any, context?: LogLineContext, level?: LogLevel): void;
  info(message: any, context?: LogLineContext, level?: LogLevel): void;
  debug(message: any, context?: LogLineContext, level?: LogLevel): void;
}

export type LogLineContext = Record<string, any>;
export interface LogMethods {
  mark(name: string): void;
  measure(name: string, start: string, end: string): void;
}

export type LogLine = {
  line: string;
  timestamp?: number;
  level?: string;
  meta?: any;
  app?: string;
};

export type LogOptions = {
  hostname?: string;
  defaultContext?: Context;
  url?: string;
  app?: string;
  flushInterval?: number;
  enableStacktrace?: boolean;
  sampleRate?: number;
  tags?: Tags;
  plugins?: Plugin[];
  ingestionKey?: string;
  hooks?: HooksOption;
  // internalErrorLogger?: (...args: any[]) => any;
  type: 'pretty' | 'stdout' | 'api' | 'off';
};

export type ErrorContext = {
  colno?: number;
  lineno?: number;
  stacktrace?: string;
  source?: string;
};

export type LogMessage = {
  level: LogLevel;
  message: any;
  context?: LogLineContext;
  error?: ErrorContext | null | undefined;
  disableStacktrace?: boolean;
};

export type Context = {
  [key: string]: any;
};

export type SessionId = string;

export type Tags = string | string[];

export type LogLevel = 'log' | 'debug' | 'error' | 'warn' | 'info';

export type Plugin = {
  name: string;
  init?: (...args: any[]) => any;
  methods?: (...args: any[]) => any;
  hooks?: Hooks;
};

type Hooks = {
  beforeSend: BeforeSendHook;
};

type BeforeSendHook = (logMessage: LogMessage) => LogMessage;

type HooksOption = {
  beforeSend: BeforeSendHook[];
};
